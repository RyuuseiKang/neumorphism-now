{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","x","y","year","month","day","hour","minutes","seconds","md","yy","m0","d","h","m1","s","style","textShadow","this","ticking","setInterval","tick","clearInterval","e","setState","window","innerWidth","event","clientX","innerHeight","clientY","makeShadow","mo","dd","hh","mi","ss","digit","Date","getFullYear","toString","substring","parseInt","getMonth","getDate","getHours","getMinutes","getSeconds","shadow","push","className","onMouseMove","_onMouseMove","bind","class","href","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f79f7863.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {x: 0.5, y: 0.5, year: '', month: '', day: '', hour: '', minutes: '', seconds: '', md: '',\r\n                  yy: false, m0: false, d: false, h: false, m1: false, s: 'animations',\r\n                  style: {textShadow: ['0.7vmin 0.7vmin 1vmin #d0d0d0', '-0.7vmin -0.7vmin 1vmin #ffffff']}};    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this.ticking = setInterval(\r\n      () => this.tick(), 10\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.ticking);\r\n  }\r\n\r\n  _onMouseMove(e) {\r\n    this.setState({x: ((window.innerWidth - window.event.clientX) / window.innerWidth) - 0.5,\r\n                  y: ((window.innerHeight - window.event.clientY) / window.innerHeight) - 0.5});\r\n    this.makeShadow();\r\n  }\r\n\r\n  tick() {\r\n    const digit = ['0', '', '', '', '', '', ''];\r\n    let yy, mo, dd, hh, mi, ss;\r\n\r\n    yy = new Date().getFullYear().toString().substring(0, 4);\r\n    mo = digit[parseInt((new Date().getMonth() + 1) / 10)] + (new Date().getMonth() + 1).toString();\r\n    dd = digit[parseInt(new Date().getDate() / 10)] + new Date().getDate().toString();\r\n    hh = digit[parseInt(new Date().getHours() / 10)] + new Date().getHours().toString();\r\n    mi = digit[parseInt(new Date().getMinutes() / 10)] + new Date().getMinutes().toString();\r\n    ss = digit[parseInt(new Date().getSeconds() / 10)] + new Date().getSeconds().toString();\r\n\r\n    \r\n    if (ss !== this.state.seconds && this.state.seconds !== '')\r\n      this.setState({\r\n        s: \"seconds\"\r\n      });\r\n    \r\n    if (ss === \"59\" || ss === \"00\") {\r\n      this.setState({\r\n        m1: \"animations\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        m1: \"\"\r\n      });\r\n    }\r\n\r\n    if ((mi === \"59\" || mi === \"00\") && this.state.m1 === \"animations\") {\r\n      this.setState({\r\n        h: \"animations\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        h: \"\"\r\n      });\r\n    }\r\n\r\n    if ((hh === \"23\" || hh === \"00\") && this.state.h === \"animations\") {\r\n      this.setState({\r\n        d: \"animations\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        d: \"\"\r\n      });\r\n    }\r\n\r\n    if ((dd === new Date(yy, mo, 0).getDate().toString() || dd === \"01\") && this.state.d === \"animations\") {\r\n      this.setState({\r\n        m0: \"animations\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        m0: \"\"\r\n      });\r\n    }\r\n\r\n    if ((mo === \"12\" || mo === \"01\") && this.state.m0 === \"animations\") {\r\n      this.setState({\r\n        yy: \"animations\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        yy: \"\"\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      year: yy,\r\n      month: mo,\r\n      day: dd,\r\n      hour: hh,\r\n      minutes: mi,\r\n      seconds: ss,\r\n    })\r\n  }\r\n\r\n  getMax\r\n\r\n  makeShadow() {\r\n    let shadow, x, y;\r\n    const val = 1.4;\r\n    shadow = [];\r\n\r\n    x = val * this.state.x;\r\n    y = val * this.state.y;\r\n\r\n    shadow.push(`${x}vmin ${y}vmin 1vmin #d0d0d0`);\r\n    shadow.push(`${-x}vmin ${-y}vmin 1vmin #ffffff`);\r\n    \r\n    return this.setState({\r\n      style: {\r\n        textShadow: shadow\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\" onMouseMove={this._onMouseMove.bind(this)} style={this.state.style}>\r\n        <header className=\"App-header\">\r\n          <div>\r\n            <span class={this.state.yy}>{this.state.year}</span>\r\n            <span></span>\r\n            <span class={this.state.m0}>{this.state.month}</span>\r\n            <span></span>\r\n            <span class={this.state.d}>{this.state.day}</span>\r\n          </div>\r\n          <div>\r\n            <span class={this.state.h}>{this.state.hour}</span>\r\n            <span class=\"separator\">:</span>\r\n            <span class={this.state.m1}>{this.state.minutes}</span>\r\n            <span class=\"separator\">:</span>\r\n            <span class={this.state.s}>{this.state.seconds}</span>\r\n          </div>\r\n        </header>\r\n        <div class=\"footer\">\r\n          <a href=\"https://github.com/ryuuseikang/neumorphism-now\">\r\n            <i class=\"fab fa-github fa-3x\"></i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}